// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// DCC_tx //
// ------ //

#define DCC_tx_wrap_target 0
#define DCC_tx_wrap 15

#define DCC_tx_offset_start 0u

static const uint16_t DCC_tx_program_instructions[] = {
            //     .wrap_target
    0x6028, //  0: out    x, 8                       
    0x0026, //  1: jmp    !x, 6                      
    0xf24e, //  2: set    y, 14           side 0 [2] 
    0xba42, //  3: nop                    side 1 [2] 
    0x1283, //  4: jmp    y--, 3          side 0 [2] 
    0xba42, //  5: nop                    side 1 [2] 
    0xba42, //  6: nop                    side 1 [2] 
    0xb442, //  7: nop                    side 0 [4] 
    0xe047, //  8: set    y, 7                       
    0x7921, //  9: out    x, 1            side 1 [1] 
    0x002d, // 10: jmp    !x, 13                     
    0x1289, // 11: jmp    y--, 9          side 0 [2] 
    0x1800, // 12: jmp    0               side 1     
    0xba42, // 13: nop                    side 1 [2] 
    0x1589, // 14: jmp    y--, 9          side 0 [5] 
    0x1800, // 15: jmp    0               side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program DCC_tx_program = {
    .instructions = DCC_tx_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config DCC_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + DCC_tx_wrap_target, offset + DCC_tx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "hardware/irq.h"
static inline void DCC_tx_program_init(PIO pio, uint sm, uint offset, uint pin, float div, irq_handler_t irqHandler) {
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_gpio_init(pio, pin);
    pio_sm_config c = DCC_tx_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 16); // shift_to_right, autopull, nBits
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset + DCC_tx_offset_start, &c);
    //Init Interrupts
    irq_add_shared_handler(PIO0_IRQ_0, irqHandler, PICO_SHARED_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY);
    pio_set_irq0_source_enabled(pio, pis_sm0_tx_fifo_not_full, true); // run system irq when fifo bytes are shifted out
    irq_set_enabled(PIO0_IRQ_0, true);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void DCC_tx_program_to_pio(PIO pio, uint sm, uint16_t bitpattern) {
//    pio_sm_put_blocking(pio, sm, (uint32_t) bitpattern);
    while (pio_sm_is_tx_fifo_full(pio, sm))
        ;
    // note that direct reg access is used to write to the upper 16 bits of the tx FIFO to be shifted out LEFT
    // some versions of GCC dislike this
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
    *(io_rw_16 *)&pio->txf[sm] = bitpattern;
#pragma GCC diagnostic pop
}

#endif
